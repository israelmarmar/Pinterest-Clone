{
  "_args": [
    [
      {
        "raw": "node-twitter-api@^1.8.0",
        "scope": null,
        "escapedName": "node-twitter-api",
        "name": "node-twitter-api",
        "rawSpec": "^1.8.0",
        "spec": ">=1.8.0 <2.0.0",
        "type": "range"
      },
      "/home/israelmarmar/Desktop/Pinterest-Clone"
    ]
  ],
  "_from": "node-twitter-api@>=1.8.0 <2.0.0",
  "_id": "node-twitter-api@1.8.0",
  "_inCache": true,
  "_location": "/node-twitter-api",
  "_nodeVersion": "0.10.25",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/node-twitter-api-1.8.0.tgz_1473102778493_0.8619339256547391"
  },
  "_npmUser": {
    "name": "renner96",
    "email": "mail@reneraab.org"
  },
  "_npmVersion": "3.5.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "node-twitter-api@^1.8.0",
    "scope": null,
    "escapedName": "node-twitter-api",
    "name": "node-twitter-api",
    "rawSpec": "^1.8.0",
    "spec": ">=1.8.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "http://registry.npmjs.org/node-twitter-api/-/node-twitter-api-1.8.0.tgz",
  "_shasum": "54bd9f7cb3b3554b3f5b44d40c082028de735610",
  "_shrinkwrap": null,
  "_spec": "node-twitter-api@^1.8.0",
  "_where": "/home/israelmarmar/Desktop/Pinterest-Clone",
  "author": {
    "name": "RenÃ© Raab"
  },
  "bugs": {
    "url": "https://github.com/reneraab/node-twitter-api/issues"
  },
  "dependencies": {
    "oauth": ">=0.8.4",
    "request": "*"
  },
  "description": "Simple module for using Twitter's API in node.js",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "54bd9f7cb3b3554b3f5b44d40c082028de735610",
    "tarball": "https://registry.npmjs.org/node-twitter-api/-/node-twitter-api-1.8.0.tgz"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "gitHead": "1d2dff2f46dbdd7e96eaf0c3fe9d34aef2c6f9fe",
  "homepage": "https://github.com/reneraab/node-twitter-api",
  "keywords": [
    "twitter",
    "oauth",
    "rest",
    "streaming"
  ],
  "licenses": {
    "type": "MIT",
    "url": "https://raw.github.com/reneraab/node-twitter-api/master/LICENSE"
  },
  "main": "./twitter",
  "maintainers": [
    {
      "name": "renner96",
      "email": "renner.raab@gmail.com"
    }
  ],
  "name": "node-twitter-api",
  "optionalDependencies": {},
  "readme": "# node-twitter #\n\n\nSimple module for using Twitter's API in node.js\n\n\n## Installation ##\n\n\n`npm install node-twitter-api`\n\n## Usage ##\n\n### Step 1: Initialization ###\n```javascript\nvar twitterAPI = require('node-twitter-api');\nvar twitter = new twitterAPI({\n\tconsumerKey: 'your consumer Key',\n\tconsumerSecret: 'your consumer secret',\n\tcallback: 'http://yoururl.tld/something'\n});\n```\n\nOptionally you can add `x_auth_access_type: \"read\"` or `x_auth_access_type: \"write\"` (see: https://dev.twitter.com/oauth/reference/post/oauth/request_token).\n### Step 2: Getting a request token ###\n```javascript\ntwitter.getRequestToken(function(error, requestToken, requestTokenSecret, results){\n\tif (error) {\n\t\tconsole.log(\"Error getting OAuth request token : \" + error);\n\t} else {\n\t\t//store token and tokenSecret somewhere, you'll need them later; redirect user\n\t}\n});\n```\nIf no error has occured, you now have a `requestToken` and a `requestTokenSecret`. You should store them somewhere (e.g. in a session, if you are using express), because you will need them later to get the current user's access token, which is used for authentification.\n\n### Step 3: Getting an Access Token ###\nRedirect the user to `https://twitter.com/oauth/authenticate?oauth_token=[requestToken]`. `twitter.getAuthUrl(requestToken, options)` also returns that URL (the options parameter is optional and may contain a boolean `force_login` and a String `screen_name` - see the Twitter API Documentation for more information on these parameters).\nIf he allows your app to access his data, Twitter will redirect him to your callback-URL (defined in Step 1) containing the get-parameters: `oauth_token` and `oauth_verifier`. You can use `oauth_token` (which is the `requestToken` in Step 2) to find the associated `requestTokenSecret`. You will need `requestToken`, `requestTokenSecret` and `oauth_verifier` to get an Access Token.\n```javascript\ntwitter.getAccessToken(requestToken, requestTokenSecret, oauth_verifier, function(error, accessToken, accessTokenSecret, results) {\n\tif (error) {\n\t\tconsole.log(error);\n\t} else {\n\t\t//store accessToken and accessTokenSecret somewhere (associated to the user)\n\t\t//Step 4: Verify Credentials belongs here\n\t}\n});\n```\nIf no error occured, you now have an `accessToken` and an `accessTokenSecret`. You need them to authenticate later API-calls.\n\n### Step 4: (Optional) Verify Credentials ###\n```javascript\ntwitter.verifyCredentials(accessToken, accessTokenSecret, params, function(error, data, response) {\n\tif (error) {\n\t\t//something was wrong with either accessToken or accessTokenSecret\n\t\t//start over with Step 1\n\t} else {\n\t\t//accessToken and accessTokenSecret can now be used to make api-calls (not yet implemented)\n\t\t//data contains the user-data described in the official Twitter-API-docs\n\t\t//you could e.g. display his screen_name\n\t\tconsole.log(data[\"screen_name\"]);\n\t}\n});\n```\nIn the above example, `params` is an optional object containing extra parameters to be sent to the Twitter endpoint (see https://dev.twitter.com/rest/reference/get/account/verify_credentials)\n\n## Methods ##\n(Allmost) all function names replicate the endpoints of the Twitter API 1.1.\nIf you want to post a status e. g. - which is done by posting data to statuses/update - you can just do the following:\n```javascript\ntwitter.statuses(\"update\", {\n\t\tstatus: \"Hello world!\"\n\t},\n\taccessToken,\n\taccessTokenSecret,\n\tfunction(error, data, response) {\n\t\tif (error) {\n\t\t\t// something went wrong\n\t\t} else {\n\t\t\t// data contains the data sent by twitter\n\t\t}\n\t}\n);\n```\n\nMost of the functions use the scheme:\n`twitter.[namespace]([type], [params], [accessToken], [accessTokenSecret], [callback]);`\n* _namespace_ is the word before the slash (e.g. \"statuses\", \"search\", \"direct_messages\" etc.)\n* _type_ is the word after the slash (e.g. \"create\", \"update\", \"show\" etc.)\n* _params_ is an object containing the parameters you want to give to twitter (refer to the Twitter API Documentation for more information)\n* _accessToken_ and _accessTokenSecret_ are the token and secret of the authenticated user\n* _callback_ is a function with the parameters _error_ (either null or an error object), _data_ (data object) and _response_ (unprocessed response from Twitter)\n\nFor Timelines you can also use the function _getTimeline_ which has the following types:\n* `user` or `user_timeline` (Note that you need to either specify user_id or screen_name when using this timeline)\n* `home` or `home_timeline`\n* `mentions` or `mentions_timeline`\n* `retweets` or `retweets_of_me`\n\nFor more information on the different types of timelines see https://dev.twitter.com/rest/reference/get/statuses/home_timeline (analog for the other types)\n\nFor Streams you must use _getStream_ which has two instead of just one callback: a dataCallback and an endCallback. (c.f. data and end events of node's http response)\n\n## How to upload media ##\nTo upload media to Twitter, call `twitter.uploadMedia(params, accessToken, accessTokenSecret, callback)` with params containing the following:\n* _media_: Either the raw binary content of the image, the binary base64 encoded (see isBase64 below) or the path to the file containing the image.\n* _isBase64_: Set to true, if media contains base64 encoded data\nFor a example result see https://dev.twitter.com/rest/reference/post/media/upload. You can pass multiple media_ids to the statuses/update endpoint by seperating them with commas (e.g. \"[id1],[id2],[id3],[id4]\").\n\n## How to upload Video ##\nTo upload video to Twitter, call `twitter.uploadVideo(params, accessToken, accessTokenSecret, callback)` with params containing the following:\n* _media_: Path to the file containing the video.\n\nYou can pass media_id to the statuses/update endpoint and video will be uploaded to twitter. Please note that video should be less than 15mb or 30 sec in length.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/reneraab/node-twitter-api.git"
  },
  "scripts": {},
  "version": "1.8.0"
}
